{"version":3,"sources":["SearchForm.jsx","Recipe.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchForm","props","useState","search","setSearch","className","onSubmit","e","preventDefault","updateQuery","type","value","onChange","searchText","target","Recipe","title","calories","image","ingredients","map","ingredient","text","src","alt","App","recipes","setRecipes","query","setQuery","useEffect","a","fetch","response","json","data","hits","getRecipes","recipe","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAgCeA,EA7BI,SAACC,GAClB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAaA,OACE,uBAAMC,UAAU,cAAcC,SAPd,SAAAC,GAChBA,EAAEC,iBACFP,EAAMQ,YAAYN,GAClBC,EAAU,KAIV,UACE,uBACEC,UAAU,aACVK,KAAK,OACLC,MAAOR,EACPS,SAjBe,SAAAL,GACnB,IAAIM,EAAaN,EAAEO,OAAOH,MAC1BP,EAAUS,MAiBR,wBAAQR,UAAU,gBAAgBK,KAAK,SAAvC,wBCRSK,EAfA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxC,OACE,sBAAKd,UAAU,SAAf,UACE,6BAAKW,IACL,6BACGG,EAAYC,KAAI,SAAAC,GAAU,OACzB,6BAA2BA,EAAWC,MAA7BD,EAAWC,WAGxB,4BAAIL,IACJ,qBAAKZ,UAAU,QAAQkB,IAAKL,EAAOM,IAAI,SC6B9BC,EApCH,WACV,IAGA,EAA8BvB,mBAAS,IAAvC,mBAAOwB,EAAP,KAAgBC,EAAhB,KACA,EAA0BzB,mBAAS,WAAnC,mBAAO0B,EAAP,KAAcC,EAAd,KAaA,OAXAC,qBAAU,YACQ,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSJ,EADT,mBARjB,WAQiB,oBAPhB,qCAMK,cACXK,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBR,EAAWQ,EAAKC,MALC,2CAAH,qDAOhBC,KACC,CAACT,IAGF,sBAAKvB,UAAU,MAAf,UACE,cAAC,EAAD,CAAYI,YAAaoB,IACzB,qBAAKxB,UAAU,UAAf,SACGqB,EAAQN,KAAI,SAACkB,GAAD,OACX,cAAC,EAAD,CAEEtB,MAAOsB,EAAOA,OAAOC,MACrBtB,SAAUqB,EAAOA,OAAOrB,SACxBC,MAAOoB,EAAOA,OAAOpB,MACrBC,YAAamB,EAAOA,OAAOnB,aAJtBmB,EAAOA,OAAOC,gBCjBhBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.db7528fd.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst SearchForm = (props) => {\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const updateSearch = e => {\r\n    let searchText = e.target.value;\r\n    setSearch(searchText);\r\n  }\r\n\r\n  const getSearch = e => {\r\n    e.preventDefault();\r\n    props.updateQuery(search);\r\n    setSearch(\"\");\r\n  }\r\n\r\n  return (\r\n    <form className=\"search-form\" onSubmit={getSearch}>\r\n      <input\r\n        className=\"search-bar\"\r\n        type=\"text\"\r\n        value={search}\r\n        onChange={updateSearch}\r\n      />\r\n      <button className=\"search-button\" type=\"submit\">\r\n        Search\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SearchForm;\r\n","import React from \"react\";\r\n\r\nconst Recipe = ({ title, calories, image, ingredients }) => {\r\n  return (\r\n    <div className=\"recipe\">\r\n      <h1>{title}</h1>\r\n      <ol>\r\n        {ingredients.map(ingredient => (\r\n          <li key={ingredient.text}>{ingredient.text}</li>\r\n        ))}\r\n      </ol>\r\n      <p>{calories}</p>\r\n      <img className=\"image\" src={image} alt=\"\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Recipe;","import React, { useEffect, useState } from \"react\";\nimport SearchForm from \"./SearchForm\";\nimport Recipe from \"./Recipe\";\nimport \"./App.css\";\n\nconst App = () => {\n  const APP_ID = \"b4520668\";\n  const APP_KEY = \"1afd1d8b7e1b717bf129520eec58392c\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [query, setQuery] = useState(\"chicken\");\n\n  useEffect(() => {\n    const getRecipes = async () => {\n      const response = await fetch(\n        `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n      );\n      const data = await response.json();\n      setRecipes(data.hits);\n    };\n    getRecipes();\n  }, [query]);\n\n  return (\n    <div className=\"App\">\n      <SearchForm updateQuery={setQuery} />\n      <div className=\"recipes\">\n        {recipes.map((recipe) => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}